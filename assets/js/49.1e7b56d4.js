(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{542:function(a,r,e){"use strict";e.r(r);var t=e(30),s=Object(t.a)({},(function(){var a=this,r=a.$createElement,e=a._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h3",{attrs:{id:"常用基础命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用基础命令"}},[a._v("#")]),a._v(" 常用基础命令")]),a._v(" "),e("h4",{attrs:{id:"环境-linux-ubuntu"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#环境-linux-ubuntu"}},[a._v("#")]),a._v(" 环境：Linux Ubuntu")]),a._v(" "),e("h5",{attrs:{id:"_1-查看docker信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-查看docker信息"}},[a._v("#")]),a._v(" 1.查看docker信息")]),a._v(" "),e("p",[a._v("docker version | docker info")]),a._v(" "),e("h5",{attrs:{id:"_2-启动docker服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-启动docker服务"}},[a._v("#")]),a._v(" 2.启动docker服务")]),a._v(" "),e("p",[a._v("sudo systemctl start docker")]),a._v(" "),e("h5",{attrs:{id:"_3-列出本机所有的image文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-列出本机所有的image文件"}},[a._v("#")]),a._v(" 3.列出本机所有的image文件")]),a._v(" "),e("p",[a._v("docker image ls  | docker images")]),a._v(" "),e("h5",{attrs:{id:"_4-删除docker-image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-删除docker-image"}},[a._v("#")]),a._v(" 4.删除docker image")]),a._v(" "),e("p",[a._v("docker image rm imageName")]),a._v(" "),e("h5",{attrs:{id:"_5-把docker文件从仓库抓到本地"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-把docker文件从仓库抓到本地"}},[a._v("#")]),a._v(" 5.把docker文件从仓库抓到本地")]),a._v(" "),e("p",[a._v("docker image pull hello-world")]),a._v(" "),e("h5",{attrs:{id:"_6-运行一个image文件-生成一个容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-运行一个image文件-生成一个容器"}},[a._v("#")]),a._v(" 6.运行一个image文件，生成一个容器")]),a._v(" "),e("p",[a._v("docker container run hello-world")]),a._v(" "),e("p",[a._v("ps:")]),a._v(" "),e("p",[a._v("①docker container run命令具有自动抓取image文件的功能，如果发现本地没有指定的image文件，就会从仓库直接抓取。因此，docker image pull 不是必须的步骤")]),a._v(" "),e("p",[a._v("②docker container run -d -p 8000:3000 --rm -it  -v /home/dock/:/home/mount/ --name first koa-demo /bin/bash")]),a._v(" "),e("p",[a._v("通过：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("    -d 后台运行容器，并返回容器ID\n\n    -p 容器端口与本地端口映射，冒号前为本地端口，冒号后为容器端口。这里的例子是将容器的3000端口映射到 8000端口\n\n    --rm 在容器终止运行后自动删除容器文件\n\n    -it  容器的shell映射到当前的shell，然后那你在本机窗口输入的命令，就会传入到容器。\n\n　　 -v 挂载本地目录，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径。\n\n    --name  给容器命名，没有这个参数会随机生成一个名字\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br")])]),e("h5",{attrs:{id:"_7-列出本机正在运行的容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-列出本机正在运行的容器"}},[a._v("#")]),a._v(" 7.列出本机正在运行的容器")]),a._v(" "),e("p",[a._v("docker container ls")]),a._v(" "),e("p",[a._v("列出本机所有容器，包括终止的容器")]),a._v(" "),e("p",[a._v("docker container ls --all")]),a._v(" "),e("p",[a._v("docker container ls -a")]),a._v(" "),e("h5",{attrs:{id:"_8-终止容器运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-终止容器运行"}},[a._v("#")]),a._v(" 8.终止容器运行")]),a._v(" "),e("p",[a._v("docker container kill [containerID]")]),a._v(" "),e("p",[a._v("docker container stop [containerID]")]),a._v(" "),e("p",[a._v("终止容器运行依旧会占用硬盘空间，可以移除")]),a._v(" "),e("p",[a._v("docker container rm [containerID]")]),a._v(" "),e("p",[a._v("ps:")]),a._v(" "),e("p",[a._v("前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。")]),a._v(" "),e("p",[a._v("这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。")]),a._v(" "),e("h5",{attrs:{id:"_9-启动容器-它用来启用已经停止运行的容器文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-启动容器-它用来启用已经停止运行的容器文件"}},[a._v("#")]),a._v(" 9.启动容器，它用来启用已经停止运行的容器文件")]),a._v(" "),e("p",[a._v("docker container start [containerID]")]),a._v(" "),e("h5",{attrs:{id:"_10-进入容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-进入容器"}},[a._v("#")]),a._v(" 10.进入容器")]),a._v(" "),e("p",[a._v("docker container exec -it [containerID或containerName]  /bin/bash")]),a._v(" "),e("h5",{attrs:{id:"_11-退出容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-退出容器"}},[a._v("#")]),a._v(" 11.退出容器")]),a._v(" "),e("p",[a._v("①在容器内使用“exit”命令退出,会终止容器的运行")]),a._v(" "),e("p",[a._v("②ctrl+p+q 不会终止容器运行")]),a._v(" "),e("h5",{attrs:{id:"_12"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12"}},[a._v("#")]),a._v(" 12.")]),a._v(" "),e("p",[a._v("①将容器的文件复制到本地")]),a._v(" "),e("p",[a._v("docker cp 容器名:/容器目录/文件名  /宿主机目录/文件名")]),a._v(" "),e("p",[a._v("②将本地的文件复制到容器")]),a._v(" "),e("p",[a._v("docker cp /宿主机目录/文件名 容器名:/容器目录/文件名")]),a._v(" "),e("h5",{attrs:{id:"_13-将容器打包成镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-将容器打包成镜像"}},[a._v("#")]),a._v(" 13.将容器打包成镜像")]),a._v(" "),e("p",[a._v("docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]")]),a._v(" "),e("p",[a._v("-a :提交的镜像作者；")]),a._v(" "),e("p",[a._v("-c :使用Dockerfile指令来创建镜像；")]),a._v(" "),e("p",[a._v("-m :提交时的说明文字；")]),a._v(" "),e("p",[a._v("-p :在commit时，将容器暂停。")]),a._v(" "),e("p",[a._v('eg: docker commit -a "runoob.com" -m "my apache" a404c6c174a2 mymysql:v1')]),a._v(" "),e("h5",{attrs:{id:"_14-查看容器信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-查看容器信息"}},[a._v("#")]),a._v(" 14.查看容器信息")]),a._v(" "),e("p",[a._v("docker inspect [containerID]")]),a._v(" "),e("h5",{attrs:{id:"_15-容器自启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-容器自启动"}},[a._v("#")]),a._v(" 15.容器自启动")]),a._v(" "),e("p",[a._v("docker update --restart=always [containerID]")])])}),[],!1,null,null,null);r.default=s.exports}}]);