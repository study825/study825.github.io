(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{517:function(e,t,a){"use strict";a.r(t);var i=a(30),n=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h5",{attrs:{id:"make"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make"}},[e._v("#")]),e._v(" make")]),e._v(" "),a("p",[e._v("The make built-in function allocates and initializes an object of typeslice, map, or chan (only). Like new, the first argument is a type, not a value. Unlike new, make's return type is the same as the type of its argument, not a pointer to it.\nThe specification of the result depends on the type:")]),e._v(" "),a("ul",[a("li",[e._v("Slice: The size specifies the length. The capacity of the slice is equal to its length. A second integer argument may be provided to specify a different capacity; it must be no smaller than the length. For example, make([]int, 0, 10) allocates an underlying array of size 10 and returns a slice of length 0 and capacity 10 that is backed by this underlying array.")]),e._v(" "),a("li",[e._v("Map: An empty map is allocated with enough space to hold the specified number of elements. The size may be omitted, in which case a small starting size is allocated.")]),e._v(" "),a("li",[e._v("Channel: The channel's buffer is initialized with the specified buffer capacity. If zero, or the size is omitted, the channel is unbuffered.")])]),e._v(" "),a("h5",{attrs:{id:"new"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new"}},[e._v("#")]),e._v(" new")]),e._v(" "),a("p",[e._v("The new built-in function allocates memory. The first argument is a type, not a value, and the value returned is a pointer to a newly allocated zero value of that type.")])])}),[],!1,null,null,null);t.default=n.exports}}]);